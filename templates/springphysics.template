<h1 class="title">
    Spring Physics Demo
</h1>

<div class="section description">
    <h2>
        Description
    </h2>
    <div class="section_body">
        <ul>
            <li>
            Worked on during April 20th 2012
            </li>
            <li>
            Coded in C++ using SFML
            </li>
            <li>
            Based off a simulation of springs using Hooke's Law
            </li>
            <li>
            The player is a ball of springs that can change its spring and damping constants to let its shape become flexible, then change its shape to become rigid, launching the player into the air.
            </li>
        </ul>
    </div>
</div>

<div class="section video">
    <h2>
        Video
    </h2>
    <div class="section_body">
        <div class="youtube_video">
            <iframe width="560" height="315" src="http://www.youtube.com/embed/OS00DNj0GgI" frameborder="0" allowfullscreen></iframe>
        </div>
    </div>
</div>

<div class="section downloads">
    <h2>
        Downloads
    </h2>
    <div class="section_body">
        <h3>
            Binaries
        </h3>
        <ul>
            <li>
            <a href="/~tniechci/files/SpringPhysicsW32.zip">Windows</a>
            </li>
            <li>
            <a href="/~tniechci/files/SpringPhysicsLinux.zip">Linux (old version, shape explodes much easier)</a>
            </li>
        </ul>
        <h3>
            Source
        </h3>
        <ul>
            <li>
            <a href="/~tniechci/files/SpringPhysicsSrc.zip">Source</a>
            </li>
        </ul>
    </div>
</div>

<div class="section problems">
    <h2>
        Problems Overcome
    </h2>
    <div class="section_body">
        <p>Since real life is "updating constantly" and my simulation is not, forces that create an equilibrium in my simulation are imprecise, and can overshoot that balance. One example is the friction between the player's points and the ground. In real life kinetic friction opposes motion until there is none, and static friction takes over. But in my simulation friction would push the velocity of a point past equilibrium and into the other direction. This would cause the player to jiggle along the ground. I overcame this by setting a range of velocities, proportional to the time it takes for one update frame to occur, that force the velocity along the axis defined by friction to be zero and apply static friction.</p>
        <p>Allowing the player to go flexible while falling and taking a large impact would sometimes cause the shape to collapse in on itself. To fix this I made becoming flexible only happen while on a surface and slowly over time, so flying at a wall or the ground you would be in the default form, but if you were resting on the ground you could still become flexible.</p>
    </div>
</div>
